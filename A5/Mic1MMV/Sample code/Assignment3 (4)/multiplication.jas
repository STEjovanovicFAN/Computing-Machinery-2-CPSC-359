//Jeremy Lau 10129094 
//Van Dyke 10123775	

.constant
        OBJREF 0x40
.end-constant

//main will test IMUL with 2 values
//simply change values being bipush to test for negative values and other amounts
.main
             
        LDC_W	OBJREF
        BIPUSH          3	//multipler
        BIPUSH          5	//multiplicand
        INVOKEVIRTUAL   IMUL	//call mult function

        IRETURN			//end test

.end-main


.method IMUL(p1,p2)
        .var
                        counter	
                        product
			m1	//temp multiplier used in loop calculation
			m2	//temp multiplicand used in loop calculation
			i1	//absolute value of multiplier
			i2	//absolute value of multiplicand
        .end-var

IMUL:   

	ILOAD		p1	//load multiplier
	ISTORE		i1	//store in temp
	ILOAD		p2	//load multiplicand
	ISTORE		i2	//store in temp

        ILOAD           i1      //load abs of multiplier
        IFLT            negp1	//function to make it absolute value
check1:        
	ILOAD           i2      //load abs of multiplicand
        IFLT            negp2	//function to make it absolute value
mstart:      
        ILOAD           i1      
	ISTORE		m1	//store abs multiplier in temp
	ILOAD		i2
	ISTORE		m2	//store abs multiplicand in temp
mloop:
        ILOAD           m2      
        ILOAD           counter	//a counter to see how many times needed to add
        IF_ICMPEQ       mloopend//if equal to multiplicand end
        ILOAD           product	//product
        ILOAD           m1	//multplier
        IADD			//add them
        ISTORE          product	//store in product
        ILOAD           counter	
        BIPUSH          0x1
        IADD			//increment counter
        ISTORE          counter
        
        GOTO            mloop	//loop to top

mloopend:

	ILOAD		p1		//load intial input
	IFLT		procheck	//if negative loop to check
	ILOAD		p2		//load second intial input if first one was positive
	IFLT		negproduct	//if negative neg product
	GOTO		multend	

multend:
        ILOAD           product		//return the product
        IRETURN

negp1:
	ILOAD		i1		//value of multiplier
	NEG				//make it abs
	ISTORE		i1
	GOTO		check1		//go to see if second value needs to be neg
negp2:
	ILOAD 		i2		//value of multiplicand
	NEG				//make it abs
	ISTORE		i2
	GOTO 		mstart

procheck:
	ILOAD		p2		//load input value of multplicand
	IFLT		multend		//if neg go to end
	GOTO		negproduct	//neg product
negproduct:
	ILOAD		product		//load product and neg it then store it and return to end
	NEG
	ISTORE		product
	GOTO		multend

.end-method
